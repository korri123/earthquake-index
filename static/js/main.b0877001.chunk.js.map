{"version":3,"sources":["sortUtils.ts","earthquakeContext.ts","types.ts","components/EarthquakeList.tsx","service.ts","utility.ts","components/Toolbar.tsx","components/Insights.tsx","App.tsx","index.tsx"],"names":["makeSortFn","fieldFn","reverse","sortNums","a","b","sortOptions","newest","name","id","sortFunction","earthquake","getTime","oldest","size","quality","depth","longitude","latitude","defaultCtx","sortOption","setSortOption","pollTime","setPollTime","time","nextRefreshTime","GlobalEarthquakeContext","React","createContext","EarthquakeData","Date","this","timestamp","Earthquakes","Type","ListColumn","children","style","flex","marginBottom","alignSelf","className","HeaderListColumn","ListItem","humanReadableLocation","display","flexDirection","width","height","toDateString","EarthquakeList","earthquakes","results","map","requestEarthquakeData","fetch","response","json","plainToClass","setStateAndRef","setState","ref","value","current","log","data","SortOptions","useContext","justifyContent","onChange","event","currentTarget","Object","values","option","PollOptions","alignItems","type","e","parseFloat","textAlign","color","fontSize","NextFetchTimer","getSecondsLeft","useCallback","Math","floor","useState","secondsLeft","setSecondsLeft","intervalCallback","setIntervalCallback","intervalCallbackRef","useRef","clearIntervalCallback","clearInterval","useEffect","interval","setInterval","Toolbar","InsightItem","title","result","Insights","averageSize","latestDate","biggest","toFixed","App","setEarthquakes","pollTimer","setPollTimer","pollTimerRef","getNextRefreshTime","setNextRefreshTime","updateEarthquakeData","clearTimeoutCallback","clearTimeout","resetTimeout","setTimeout","pollItems","sortedEarthquakes","sort","length","some","index","reduce","max","calculateInsights","Provider","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0877001.chunk.js","sourcesContent":["import { EarthquakeData } from './types';\r\n\r\nexport type SortFunction = (a: EarthquakeData, b: EarthquakeData) => number;\r\n\r\nexport interface SortOption {\r\n  name: string\r\n  id: string\r\n  sortFunction: SortFunction\r\n}\r\n\r\nconst makeSortFn = (fieldFn: (earthquake: EarthquakeData) => number, reverse?: boolean): SortFunction => {\r\n  const sortNums = (a: number, b: number) => a - b;\r\n  return (a: EarthquakeData, b: EarthquakeData) => {\r\n    return !reverse ? sortNums(fieldFn(b), fieldFn(a)) : sortNums(fieldFn(a), fieldFn(b));\r\n  };\r\n};\r\n\r\nexport const sortByNew = makeSortFn(earthquake => earthquake.getTime().getTime());\r\nexport const sortByOld = makeSortFn(earthquake => earthquake.getTime().getTime(), true)\r\nexport const sortBySize = makeSortFn(earthquake => earthquake.size);\r\nexport const sortByQuality = makeSortFn(earthquake => earthquake.quality);\r\nexport const sortByDepth = makeSortFn(earthquake => earthquake.depth);\r\nexport const sortByLongitude = makeSortFn(earthquake => earthquake.longitude);\r\nexport const sortByLatitude = makeSortFn(earthquake => earthquake.latitude);\r\n\r\ninterface SortOptions {\r\n  newest: SortOption;\r\n  oldest: SortOption;\r\n  size: SortOption;\r\n  quality: SortOption;\r\n  depth: SortOption;\r\n  longitude: SortOption;\r\n  latitude: SortOption;\r\n  [key:string]: SortOption;\r\n}\r\n\r\nexport const sortOptions: SortOptions = {\r\n  newest: { name: 'Newest', id: 'newest', sortFunction: sortByNew },\r\n  oldest: { name: 'Oldest', id: 'oldest', sortFunction: sortByOld },\r\n  size: { name: 'Size', id: 'size', sortFunction: sortBySize },\r\n  quality: { name: 'Quality', id: 'quality', sortFunction: sortByQuality },\r\n  depth: { name: 'Depth', id: 'depth', sortFunction: sortByDepth },\r\n  longitude: { name: 'Longitude', id: 'longitude', sortFunction: sortByLongitude },\r\n  latitude: { name: 'Latitude', id: 'latitude', sortFunction: sortByLatitude },\r\n}","import { SortOption, sortOptions } from './sortUtils';\r\nimport React from 'react';\r\n\r\nexport interface EarthquakeContext {\r\n  sortOption: SortOption;\r\n  setSortOption: (sortOption: SortOption) => void;\r\n  pollTime: number;\r\n  setPollTime: (time: number) => void;\r\n  nextRefreshTime: number\r\n}\r\n\r\nexport const defaultCtx: EarthquakeContext = {\r\n  sortOption: sortOptions.newest,\r\n  setSortOption: () => {},\r\n  pollTime: 60,\r\n  setPollTime: (time: number) => {},\r\n  nextRefreshTime: 0\r\n};\r\n\r\nexport const GlobalEarthquakeContext = React.createContext<EarthquakeContext>(defaultCtx);\r\n","import { Type } from 'class-transformer';\r\nimport 'reflect-metadata';\r\n\r\nexport class EarthquakeData {\r\n  'depth': number;\r\n  'humanReadableLocation': string;\r\n  'latitude': number;\r\n  'longitude': number;\r\n  'quality': number;\r\n  'size': number;\r\n  'timestamp': string;\r\n\r\n  getTime() : Date {\r\n    return new Date(this.timestamp);\r\n  }\r\n}\r\n\r\nexport class Earthquakes {\r\n  @Type(() => EarthquakeData)\r\n  results: EarthquakeData[] = [];\r\n}","import React from 'react';\r\nimport { EarthquakeData, Earthquakes } from '../types';\r\n\r\ninterface Props {\r\n  earthquakes: Earthquakes\r\n}\r\n\r\nconst ListColumn = ({ children }: { children: React.ReactNode }) => {\r\n  return <div style={{ flex: 1, marginBottom: '1em', alignSelf: 'center' }} className='list-column'>{children}</div>\r\n}\r\n\r\nconst HeaderListColumn = ({ children }: { children: React.ReactNode }) => {\r\n  return <ListColumn><h4>{children}</h4></ListColumn>\r\n}\r\n\r\nconst ListItem = ({ earthquake }: { earthquake: EarthquakeData }) => {\r\n  const { depth, humanReadableLocation, latitude, longitude, quality, size } = earthquake;\r\n  return <div style={{ display: 'flex', flexDirection: 'row', width: '100%', height: '4em' }}\r\n    className='list-item'>\r\n    <ListColumn>{humanReadableLocation}</ListColumn>\r\n    <ListColumn>{latitude}</ListColumn>\r\n    <ListColumn>{longitude}</ListColumn>\r\n    <ListColumn>{quality}</ListColumn>\r\n    <ListColumn>{earthquake.getTime().toDateString()}</ListColumn>\r\n    <ListColumn>{size}</ListColumn>\r\n    <ListColumn>{depth}</ListColumn>\r\n  </div>\r\n}\r\n\r\nconst EarthquakeList = ({ earthquakes } : Props) => {\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column' }} className='earthquake-list'>\r\n      <div style={{ display: 'flex', flexDirection: 'row', width: '100%' }}>\r\n        <HeaderListColumn>Location</HeaderListColumn>\r\n        <HeaderListColumn>Latitude</HeaderListColumn>\r\n        <HeaderListColumn>Longitude</HeaderListColumn>\r\n        <HeaderListColumn>Quality</HeaderListColumn>\r\n        <HeaderListColumn>Time</HeaderListColumn>\r\n        <HeaderListColumn>Size</HeaderListColumn>\r\n        <HeaderListColumn>Depth</HeaderListColumn>\r\n      </div>\r\n      {earthquakes.results.map(earthquake => <ListItem earthquake={earthquake} key={earthquake.humanReadableLocation + earthquake.timestamp}/>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarthquakeList;","import { Earthquakes } from './types';\r\nimport { plainToClass } from 'class-transformer';\r\n\r\nconst EARTHQUAKE_URL = 'https://apis.is/earthquake/is';\r\n\r\nexport const requestEarthquakeData = async () : Promise<Earthquakes> => {\r\n  const response = await fetch(EARTHQUAKE_URL);\r\n  const json = await response.json();\r\n  return plainToClass(Earthquakes, json);\r\n}\r\n\r\n","import { MutableRefObject } from 'react';\r\n\r\n// utility function for setting both state and ref for use in useEffect\r\nexport const setStateAndRef = <T>(setState: (t: T) => void, ref: MutableRefObject<T|undefined>, value: T) => {\r\n  setState(value);\r\n  ref.current = value;\r\n}\r\n\r\nexport const log = (...data: any[]) => {\r\n  if (process.env.NODE_ENV !== 'production')\r\n    console.log(`DEBUG: ${data}`);\r\n}","import React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { SortOption, sortOptions } from '../sortUtils';\r\nimport { GlobalEarthquakeContext } from '../earthquakeContext';\r\nimport { log, setStateAndRef } from '../utility';\r\nimport '../styles/global.css'\r\n\r\n\r\nconst SortOptions = () => {\r\n  const { setSortOption } = useContext(GlobalEarthquakeContext);\r\n  return <div style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n    <div className=\"toolbar-label\">Sort by</div>\r\n    <select onChange={event => setSortOption(sortOptions[event.currentTarget.value])}>\r\n      {Object.values(sortOptions).map((option: SortOption) => {\r\n        return <option value={option.id} key={option.id}>{option.name}</option>\r\n      })}\r\n    </select>\r\n  </div>\r\n}\r\n\r\nconst PollOptions = () => {\r\n  const { pollTime, setPollTime } = useContext(GlobalEarthquakeContext);\r\n\r\n  return <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n    <div className='toolbar-label'>Refresh time</div>\r\n    <input type={'number'} value={pollTime} onChange={(e) => {\r\n      setPollTime(parseFloat(e.currentTarget.value))\r\n    }} style={{width: '5em', height: '2.1em', textAlign: 'center', color: '#888', fontSize: '1em'}}/>\r\n    <div className=\"toolbar-label\">seconds</div>\r\n  </div>\r\n}\r\n\r\nconst NextFetchTimer = () => {\r\n  const { nextRefreshTime } = useContext(GlobalEarthquakeContext);\r\n  const getSecondsLeft = useCallback(() => Math.floor((nextRefreshTime - new Date().getTime()) / 1000),\r\n    [nextRefreshTime]);\r\n  const [secondsLeft, setSecondsLeft] = useState(getSecondsLeft())\r\n  const [intervalCallback, setIntervalCallback] = useState<NodeJS.Timeout>();\r\n  const intervalCallbackRef = useRef(intervalCallback);\r\n  const clearIntervalCallback = () => intervalCallbackRef.current && clearInterval(intervalCallbackRef.current);\r\n\r\n  useEffect(() => {\r\n    clearIntervalCallback();\r\n    const interval = setInterval(() => {\r\n      setSecondsLeft(getSecondsLeft())\r\n    }, 1000);\r\n    // setIntervalCallback(interval);\r\n    setStateAndRef(setIntervalCallback, intervalCallbackRef, interval);\r\n    log('reinitializing visual timer')\r\n    return () => {\r\n      clearIntervalCallback();\r\n    }\r\n  }, [getSecondsLeft]);\r\n\r\n  return <div>\r\n    <span>Refreshing in <b>{secondsLeft >= 0 ? secondsLeft : 0}</b> seconds</span>\r\n  </div>\r\n}\r\n\r\nconst Toolbar = () => {\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between'}} className='toolbar'>\r\n      <PollOptions/>\r\n      <NextFetchTimer/>\r\n      <SortOptions/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;","import React from 'react';\r\n\r\nconst InsightItem = ({title, result}: {title: string, result: string}) => {\r\n  return <div className=\"insight-item\">\r\n    <div><h2>{title}</h2></div>\r\n    <div><h1>{result}</h1></div>\r\n  </div>\r\n}\r\n\r\nconst Insights = ({averageSize, latestDate, biggest} : {averageSize: number, latestDate: Date, biggest: number}) => {\r\n  return (\r\n    <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '1em'}}>\r\n      <InsightItem title='Avg. Size' result={averageSize.toFixed(2)}/>\r\n      <InsightItem title='Latest' result={latestDate.toDateString()}/>\r\n      <InsightItem title='Biggest' result={biggest.toFixed(2)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Insights;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { GlobalEarthquakeContext } from './earthquakeContext';\nimport { Earthquakes } from './types';\nimport EarthquakeList from './components/EarthquakeList';\nimport { requestEarthquakeData } from './service';\nimport Toolbar from './components/Toolbar';\nimport { SortOption, sortOptions } from './sortUtils';\nimport { log, setStateAndRef } from './utility';\nimport Insights from './components/Insights';\n\nconst calculateInsights = (earthquakes: Earthquakes) => {\n  const data = earthquakes.results;\n  if (!data.length)\n    return {averageSize: 0, biggest: 0, latestDate: new Date()};\n  const averageSize = data.map(e => e.size).reduce((a, b) => a + b) / data.length;\n  const biggest = Math.max(...data.map(e => e.size));\n  const latestDate: Date = data.map(e => e.getTime()).reduce((a, b) => a.getTime() > b.getTime() ? a : b);\n  return {averageSize, biggest, latestDate};\n}\n\nconst App = () => {\n  const [earthquakes, setEarthquakes] = useState<Earthquakes>(new Earthquakes());\n  const [sortOption, setSortOption] = useState<SortOption>(sortOptions.newest)\n  const [pollTime, setPollTime] = useState<number>(60)\n  const [pollTimer, setPollTimer] = useState<NodeJS.Timeout>();\n  const pollTimerRef = useRef(pollTimer);\n  const getNextRefreshTime = useCallback(() => new Date().getTime() + pollTime * 1000, [pollTime]);\n  const [nextRefreshTime, setNextRefreshTime] = useState<number>(getNextRefreshTime())\n\n  const updateEarthquakeData = async () => {\n    log('fetching new data from server...')\n    setEarthquakes(await requestEarthquakeData())\n  };\n\n  // set initial earthquake data\n  useEffect(() => {\n    (async () => {\n      await updateEarthquakeData();\n    })();\n  }, []);\n\n  // initialize poller / refresher\n  useEffect(() => {\n    const clearTimeoutCallback = () => pollTimerRef.current && clearTimeout(pollTimerRef.current);\n    const resetTimeout = () => {\n      clearTimeoutCallback();\n      setNextRefreshTime(getNextRefreshTime());\n      setStateAndRef(setPollTimer, pollTimerRef, setTimeout(pollItems, pollTime * 1000));\n    }\n    const pollItems = () => {\n      (async () => {\n        await updateEarthquakeData();\n        resetTimeout();\n      })();\n    }\n    resetTimeout();\n    log('reinitializing timer...')\n    return () => {\n      clearTimeoutCallback();\n    }\n  }, [getNextRefreshTime, pollTime]);\n\n  useEffect(() => {\n    const sortedEarthquakes = new Earthquakes()\n    sortedEarthquakes.results = [...earthquakes.results].sort(sortOption.sortFunction);\n    if (sortedEarthquakes.results.length !== earthquakes.results.length ||\n      sortedEarthquakes.results.some((value, index) => value !== earthquakes.results[index])) {\n      // check if arrays are not equal to prevent useEffect loop\n      setEarthquakes(sortedEarthquakes);\n    }\n    log('sorting list')\n  }, [sortOption, earthquakes.results]);\n\n  const { averageSize, biggest, latestDate } = calculateInsights(earthquakes);\n  return (\n    <GlobalEarthquakeContext.Provider value={{ sortOption, setSortOption, pollTime, setPollTime, nextRefreshTime }}>\n      <div className=\"App\">\n        <header>\n          <h1>&#x1f30e; Earthquake Index</h1>\n        </header>\n        <main style={{ width: '70%', margin: '0 auto' }}>\n          <Toolbar/>\n          <Insights averageSize={averageSize} biggest={biggest} latestDate={latestDate}/>\n          <EarthquakeList earthquakes={earthquakes}/>\n        </main>\n      </div>\n    </GlobalEarthquakeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}